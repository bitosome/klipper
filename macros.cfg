[gcode_macro START_PRINT]
description: Machine heatup procedure before starting a print
variable_bed_temp: 0
variable_extruder_temp: 0
variable_z_adjust: 0
variable_bed_heatsoak_time: 0
variable_chamber_temp: 0
variable_chamber_heatsoak_max_time: 0

gcode:
# START_PRINT BED_TEMP=[first_layer_bed_temperature] EXTRUDER_TEMP={first_layer_temperature[initial_extruder]+extruder_temperature_offset[initial_extruder]} BED_HEATSOAK_TIME=10 CHAMBER_TEMP={chamber_temperature[0]} CHAMBER_HEATSOAK_MAX_TIME=10 MATERIAL=[filament_type]

    {% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES"].print_default_bed_temp)|float %} # Bed temperature
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES"].print_default_extruder_temp)|float %} # Extruder temperature
    {% set BED_HEATSOAK_TIME = params.BED_HEATSOAK_TIME|default(printer["gcode_macro _USER_VARIABLES"].print_default_bed_heatsoak_time)|int %} # Heatsoak time of the bed in minutes
    {% set CHAMBER_TEMP = params.CHAMBER_TEMP|default(printer["gcode_macro _USER_VARIABLES"].print_default_chamber_temp)|int %} # Chamber temperature setpoint
    {% set CHAMBER_HEATSOAK_MAX_TIME = params.CHAMBER_HEATSOAK_MAX_TIME|default(printer["gcode_macro _USER_VARIABLES"].print_default_chamber_heatsoak_max_time)|int %} # Chamber heatsoak timeout in minutes
    {% set MATERIAL = params.MATERIAL|default(printer["gcode_macro _USER_VARIABLES"].print_default_material)|string %} # Material type set in the slicer
    # {% set Z_ADJUST = params.Z_ADJUST|default(0)|float %}  # Optionnal Z adjustement from the slicer profile (ex. use it if you have textured vs smooth slicer profiles) 
    # {% set INITIAL_TOOL = params.INITIAL_TOOL|default(0)|int %} # Initial tool (for the MMU/ERCF initialization)
    # {% set ADAPTIVE_PRIMELINE = params.ADAPTIVE_PRIMELINE|default(1)|int %} # Weither to do or not an adaptive prime line near the real print zone

    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=bed_temp VALUE={BED_TEMP}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=extruder_temp VALUE={EXTRUDER_TEMP}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=bed_heatsoak_time VALUE={BED_HEATSOAK_TIME}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=chamber_temp VALUE={CHAMBER_TEMP}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=chamber_heatsoak_max_time VALUE={CHAMBER_HEATSOAK_MAX_TIME}

    #SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=adaptive_primeline VALUE={ADAPTIVE_PRIMELINE}
    
    {% if params.TOTAL_LAYER %} # total layers count (if provided by the slicer)
        SET_PRINT_STATS_INFO TOTAL_LAYER={params.TOTAL_LAYER|int}
        SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=total_layer VALUE={params.TOTAL_LAYER|int}
    {% endif %}

    # Get all the config options and configurations for this macro
    {% set light_intensity_start_print = printer["gcode_macro _USER_VARIABLES"].light_intensity_start_print %}
    {% set light_intensity_printing = printer["gcode_macro _USER_VARIABLES"].light_intensity_printing %}
    {% set force_homing_in_start_print = printer["gcode_macro _USER_VARIABLES"].force_homing_in_start_print %}
    {% set filament_sensor_enabled = printer["gcode_macro _USER_VARIABLES"].filament_sensor_enabled %}
    {% set part_fan_tach_enabled = printer["gcode_macro _USER_VARIABLES"].part_fan_tach_enabled %}
    {% set hotend_fan_tach_enabled = printer["gcode_macro _USER_VARIABLES"].hotend_fan_tach_enabled %}
    {% set filter_speed_printing = printer["gcode_macro _USER_VARIABLES"].filter_speed_printing %}

    RESPOND MSG="Printing with '{MATERIAL}'"
    STATUS_LEDS COLOR="BUSY"
    LIGHT_ON S={light_intensity_start_print}
    CLEAR_PAUSE
    BED_MESH_CLEAR

    UPDATE_DELAYED_GCODE ID=_STOP_FILTER_DELAYED DURATION=0
    STOP_FILTER

    # If a tachometer is enabled on one of the fans, we check them:
    #   - It's done only once for the part fan to be sure nothing block it before starting the print
    #   - And as a safety feature, we start a monitoring loop for the hotend fan (that is automatically stopped at the end of a print)
    {% if part_fan_tach_enabled %}
        M106 S255
        G4 P2000
        _PART_FAN_CHECK
        M106 S0
    {% endif %}

    {% if hotend_fan_tach_enabled %}
        UPDATE_DELAYED_GCODE ID=_BACKGROUND_HOTEND_TACHO_CHECK DURATION=1
    {% endif %}

    SET_GCODE_OFFSET Z=0
    M221 S100
    M220 S100
    G90
    M83

    # Homing before START_PRINT movements and actions
    {% if force_homing_in_start_print %}
        G28
    {% else %}
        _CG28
    {% endif %}

    # Here is the core of the START_PRINT were we get the startprint_actions variable
    # to do the procedure in the correct order for the configured probe (or user custom override)
    {% set sp_actions = printer["gcode_macro _USER_VARIABLES"].startprint_actions %}
    {% for action in sp_actions %}
        {% if action == "heatsoak_bed" %}
            _MODULE_HEATSOAK_BED
        {% elif action == "heatsoak_chamber" %}
            _MODULE_HEATSOAK_CHAMBER
        {% elif action == "gantry_leveling" %}
            _MODULE_GANTRY_LEVELING
        {% elif action == "extruder_heating" %}
            _MODULE_EXTRUDER_HEATING
        {% elif action == "purge" %}
            _MODULE_PURGE
        {% elif action == "clean" %}
            _MODULE_CLEAN
        {% elif action == "home_z" %}
            _MODULE_HOME_Z
        {% elif action == "bed_mesh" %}
            _MODULE_BED_MESH
        {% elif action == "primeline" %}
            _MODULE_PRIMELINE
        {% elif action == "extruder_preheating" %}
            _MODULE_EXTRUDER_PREHEATING
        {% else %}
            { action_raise_error("Unknown module called in START_PRINT! Please verify your startprint_actions variable override!") }
        {% endif %}
    {% endfor %}

    # Fine adjustement of z offset (from the slicer profile). This is used to do a custom adjustement
    # when using textured/smooth PEI sheets, or for a special material from the slicer, etc...
    # SET_GCODE_OFFSET Z_ADJUST={Z_ADJUST} MOVE=1

    START_FILTER SPEED={filter_speed_printing / 100}

    {% if filament_sensor_enabled %}
        SET_FILAMENT_SENSOR SENSOR="runout_sensor" ENABLE=0
    {% endif %}

    STATUS_LEDS COLOR="PRINTING"
    LIGHT_ON S={light_intensity_printing}
    RESPOND MSG="Printing"
    G92 E0.0

# ═══════════════════════════════════════════════════════

[gcode_macro END_PRINT]
description: Stop the print and filter the atmosphere for 10min before shuting down
gcode:
    {% set disable_motors_in_end_print = printer["gcode_macro _USER_VARIABLES"].disable_motors_in_end_print %}
    {% set light_intensity_end_print = printer["gcode_macro _USER_VARIABLES"].light_intensity_end_print %}
    {% set filter_time = printer["gcode_macro _USER_VARIABLES"].filter_time|default(600)|int %}
    {% set filament_sensor_enabled = printer["gcode_macro _USER_VARIABLES"].filament_sensor_enabled %}
    {% set hotend_fan_tach_enabled = printer["gcode_macro _USER_VARIABLES"].hotend_fan_tach_enabled %}

    PARK

    {% if printer.extruder.can_extrude %}
        # pull back the filament a little bit
        G92 E0
        G1 E-10 F2100
    {% endif %}

    TURN_OFF_HEATERS


    {% if hotend_fan_tach_enabled %}
        UPDATE_DELAYED_GCODE ID=_BACKGROUND_HOTEND_TACHO_CHECK DURATION=0
    {% endif %}

    M107
    M400

    BED_MESH_CLEAR

    {% if disable_motors_in_end_print %}
        M84
    {% endif %}


    # If a filter is connected, and used during the print, continue filtering the air
    # for a couple of min before stopping everything

    {% if printer['fan_generic filter'].speed > 0 %}
        {% set FILTER_TIME = params.FILTER_TIME|default(filter_time)|int %}
        START_FILTER SPEED=1
        UPDATE_DELAYED_GCODE ID=_STOP_FILTER_DELAYED DURATION={FILTER_TIME}
    {% endif %}

    LIGHT_ON S={light_intensity_end_print}
    STATUS_LEDS COLOR="DONE_PRINTING"

    # If a filament sensor is connected, re-enable it in case it was disabled during printing
    {% if filament_sensor_enabled %}
        SET_FILAMENT_SENSOR SENSOR="runout_sensor" ENABLE=1
    {% endif %}

# ═══════════════════════════════════════════════════════

[gcode_macro _MODULE_PRIMELINE]
gcode:
    RESPOND MSG="Executing a primeline..."
    PRIMELINE

# ═══════════════════════════════════════════════════════

[gcode_macro _MODULE_HEATSOAK_BED]
gcode:
    # ----- BED HEATSOAK -------------------------------------
    # Heatsoak the bed if SOAK time is set and bed is not already warming up to the correct temperature (+-8°C).
    # We make the assumption that the soak is not needed if the bed is already at the correct target.
    # We also use the recirculating filter under the bed (if available) at full power to spread the heat
    # during the heatsoak if a specific temperature need to be reached.
    {% set BED_TEMP = printer["gcode_macro START_PRINT"].bed_temp %}
    {% set BED_HEATSOAK_TIME = printer["gcode_macro START_PRINT"].bed_heatsoak_time %}
    {% set CHAMBER_TEMP = printer["gcode_macro START_PRINT"].chamber_temp %}
    {% set St = printer["gcode_macro _USER_VARIABLES"].travel_speed * 60 %}
    {% set max_x = printer.toolhead.axis_maximum.x|float %}
    {% set max_y = printer.toolhead.axis_maximum.y|float %}

    STATUS_LEDS COLOR="HEATING"

    {% if printer.heater_bed.temperature < (BED_TEMP - 8) %}
        # If the machine is equiped by a chamber temperature sensor and a recirculating filter (check is automatic under the hood),
        # then we look if a specific chamber temperature is needed and we power on the recirculating filter to spread the heat
        {% if (CHAMBER_TEMP > 0) %}
            START_FILTER SPEED=1
        {% endif %}

        # If we need a full soak (not 0 min), then move the toolhead to the center front to spread the heat using the hotend fan
        {% if BED_HEATSOAK_TIME > 0 %}
            G0 X{max_x|int / 2} Y{max_y|int / 3} Z50 F{St}
        {% endif %}
    
        # Put the bed temperature target and wait for the soak
        HEATSOAK_BED TEMP={BED_TEMP} BED_HEATSOAK_TIME={BED_HEATSOAK_TIME}
    {% else %}
        HEATSOAK_BED TEMP={BED_TEMP} BED_HEATSOAK_TIME=0
    {% endif %}

# ═══════════════════════════════════════════════════════

[gcode_macro HEATSOAK_BED]
description: Heatsoak bed at specified temperature and wait for a specific amount of time
gcode:
    {% set SETPOINT_TEMP = params.TEMP|default(0)|int %}
    {% set TIME = params.BED_HEATSOAK_TIME|default(8)|int %}
    {% set heatsoak_bed_enabled = printer["gcode_macro _USER_VARIABLES"].print_default_bed_heatsoak_time > 0 %} # configured heatsoak default value

    RESPOND MSG="Heating up bed..."

    M190 S{SETPOINT_TEMP}

    {% if TIME > 0 %}
        {% for i in range(0, TIME) %}
            RESPOND MSG="Heatsoak bed, {TIME-i}mn left..."
            G4 P{60000 * 1}
        {% endfor %}
    {% else %}
        {% if heatsoak_bed_enabled %}
            RESPOND MSG="No heatsoak needed, continue"
        {% endif %}
    {% endif %}

    RESPOND MSG="Bed temperature OK"
 
# ═══════════════════════════════════════════════════════

[gcode_macro _MODULE_HEATSOAK_CHAMBER]
gcode:
    # ----- CHAMBER HEATSOAK ----------------------------------
    # If a setpoint is defined and a sensor available, then we wait to reach the chamber temperature (with a timeout in case it's winter...)
    # If there is one, the recirculating filter is also be powered on from the previous step and kept like that to act as bed fans
    {% set CHAMBER_TEMP = printer["gcode_macro START_PRINT"].chamber_temp %}
    {% set CHAMBER_HEATSOAK_MAX_TIME = printer["gcode_macro START_PRINT"].chamber_heatsoak_max_time %}

    {% set St = printer["gcode_macro _USER_VARIABLES"].travel_speed * 60 %}

    {% set max_x = printer.toolhead.axis_maximum.x|float %}
    {% set max_y = printer.toolhead.axis_maximum.y|float %}

    {% if CHAMBER_TEMP > 0 %}
        {% set chamber_sensor_name = printer["gcode_macro _USER_VARIABLES"].chamber_temperature_sensor_name %}
        {% set CURRENT_TEMP = printer["temperature_sensor " ~ chamber_sensor_name].temperature|float %}

        # We do a first test to validate that the chamber is not already at temperature before starting the soak
        {% if CURRENT_TEMP <= CHAMBER_TEMP %}
            G0 X{max_x|int / 2} Y{max_y|int / 3} Z50 F{St}

            # Start the filter (if available) to spread the heat faster in the chamber
            START_FILTER SPEED=1

            # Wait for the temperature of the chamber to be reached (default max: 15min)
            HEATSOAK_CHAMBER TEMP={CHAMBER_TEMP} MAXTIME={CHAMBER_HEATSOAK_MAX_TIME}

            # Reset the filter status now that the chamber is at correct temperature
            STOP_FILTER
        {% endif %}
    {% endif %}

# ═══════════════════════════════════════════════════════

[gcode_macro HEATSOAK_CHAMBER]
description: Heatsoak chamber to a specific temperature with a timeout
gcode:
    {% set SETPOINT_TEMP = params.TEMP|default(0)|float %}
    {% set MAXTIME = params.MAXTIME|default(printer["gcode_macro _USER_VARIABLES"].print_default_chamber_max_heating_time)|int %}

    {% for _ in range(1, MAXTIME) %}
        _WAIT_CHAMBER_TEMP TEMP={SETPOINT_TEMP}
    {% endfor %}
    
    RESPOND MSG="Chamber temperature OK or timeout reached!"

# ═══════════════════════════════════════════════════════

[gcode_macro _WAIT_CHAMBER_TEMP]
# This macro is needed to allow klipper populate a new value in the printer[...].temperature variable as each variables are populated only once at the beginning of every macro call
gcode:
    {% set chamber_sensor_name = printer["gcode_macro _USER_VARIABLES"].chamber_temperature_sensor_name %}
    {% set SETPOINT_TEMP = params.TEMP|default(0)|float %}
    {% set CURRENT_TEMP = printer["temperature_sensor " ~ chamber_sensor_name].temperature|float %}

    {% if CURRENT_TEMP <= SETPOINT_TEMP %}
        RESPOND MSG="Heating up the chamber : {CURRENT_TEMP}/{SETPOINT_TEMP}"
        G4 P{60000 * 1} # wait a minute and check again if called in a loop
    {% endif %}

# ═══════════════════════════════════════════════════════

[gcode_macro _MODULE_GANTRY_LEVELING]
gcode:
    STATUS_LEDS COLOR="LEVELING"
    # ACTIVATE_PROBE
    _CG28
    QUAD_GANTRY_LEVEL horizontal_move_z=10 retries=0 retry_tolerance=1.000
    QUAD_GANTRY_LEVEL horizontal_move_z=3
    G28 Z
    STATUS_LEDS COLOR="READY"
    
# ═══════════════════════════════════════════════════════

[gcode_macro _MODULE_EXTRUDER_HEATING]
gcode:
    {% set EXTRUDER_TEMP = printer["gcode_macro START_PRINT"].extruder_temp %}
    # {% set INITIAL_TOOL = printer["gcode_macro START_PRINT"].initial_tool %}
    {% set purge_enabled = printer["gcode_macro _USER_VARIABLES"].purge_enabled %}
    {% set St = printer["gcode_macro _USER_VARIABLES"].travel_speed * 60 %}
    {% set Px, Py, Pz = printer["gcode_macro _USER_VARIABLES"].purge_bucket_xyz|map('float') %}
    {% set max_x = printer.toolhead.axis_maximum.x|float %}
    {% set max_y = printer.toolhead.axis_maximum.y|float %}

    STATUS_LEDS COLOR="HEATING"

    RESPOND MSG="Extruder heating to print temperature..."

    _CONDITIONAL_MOVE_TO_PURGE_BUCKET
    {% if not purge_enabled %}
        G0 X{max_x|int / 2} Y{max_y|int / 3} Z50 F{St}
    {% endif %}

    M109 S{EXTRUDER_TEMP}

    RESPOND MSG="Extruder temperature OK"

# ═══════════════════════════════════════════════════════

[gcode_macro _MODULE_PURGE]
gcode:
    {% set EXTRUDER_TEMP = printer["gcode_macro START_PRINT"].extruder_temp %}
    {% set purge_enabled = printer["gcode_macro _USER_VARIABLES"].purge_enabled %}

    {% if purge_enabled %}
        PURGE TEMP={EXTRUDER_TEMP}
    {% endif %}

# ═══════════════════════════════════════════════════════

[gcode_macro _MODULE_CLEAN]
gcode:
    # ----- PURGE AND CLEAN ---------------------------------
    # Just put the nozzle on the brush and clean it. Keep in mind that it's better to do
    # it with the hotend at material temperature but you can also do it at any time if needed
    {% set brush_enabled = printer["gcode_macro _USER_VARIABLES"].brush_enabled %}
    {% set force_homing_before_brush = printer["gcode_macro _USER_VARIABLES"].force_homing_before_brush %}

    {% if brush_enabled %}
        {% if force_homing_before_brush %}
            G28 Z # perform homing before going to the brush to avoid a miss or crash
        {% endif %}
        CLEAN_NOZZLE
    {% endif %}

# ═══════════════════════════════════════════════════════

[gcode_macro _MODULE_HOME_Z]
gcode:
    G28 Z

# ═══════════════════════════════════════════════════════

[gcode_macro _MODULE_BED_MESH]
gcode:
    BED_MESH_CALIBRATE

# ═══════════════════════════════════════════════════════

[gcode_macro _MODULE_EXTRUDER_PREHEATING]
gcode:
    STATUS_LEDS COLOR="HEATING"
    RESPOND MSG="Pre-heating the nozzle to a safe temperature..."
    M109 S150
    RESPOND MSG="Extruder at safe temperature of 150°C"      

# ═══════════════════════════════════════════════════════

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
description: Pause the print and park
gcode:
    {% set light_intensity_start_print = printer["gcode_macro _USER_VARIABLES"].light_intensity_start_print %}

    {% if printer.pause_resume.is_paused %}
        RESPOND MSG="Print is already paused"
    {% else %}
        SAVE_GCODE_STATE NAME=PAUSE_state
        LIGHT_ON S={light_intensity_start_print}
        BASE_PAUSE
        PARK
    {% endif %}

# ═══════════════════════════════════════════════════════

[gcode_macro PROBE_CALIBRATE]
gcode:
    CARTOGRAPHER_CALIBRATE

# ═══════════════════════════════════════════════════════

[gcode_macro RESUME]
rename_existing: BASE_RESUME
description: Resume the print after an optional unretract
gcode:
    {% set St = printer["gcode_macro _USER_VARIABLES"].travel_speed %}
    {% set light_intensity_printing = printer["gcode_macro _USER_VARIABLES"].light_intensity_printing %}

    {% if not printer.pause_resume.is_paused %}
        RESPOND MSG="Print is not paused. Resume ignored"
    {% else %}
        RESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 MOVE_SPEED={St}
        LIGHT_ON S={light_intensity_printing}
        BASE_RESUME
    {% endif %}

# ═══════════════════════════════════════════════════════

[gcode_macro PARK]
description: Park the toolhead at the back and retract some filament if the nozzle is hot
gcode:
    {% set Px, Py = printer["gcode_macro _USER_VARIABLES"].park_position_xy|map('float') %}
    {% set Px = params.X|default(Px)|float %}
    {% set Py = params.Y|default(Py)|float %}
    
    {% set park_lift_z = printer["gcode_macro _USER_VARIABLES"].park_lift_z %}
    {% set Z_HOP = params.Z_HOP|default(park_lift_z)|float %}

    {% set St = printer["gcode_macro _USER_VARIABLES"].travel_speed * 60 %}
    {% set Sz = printer["gcode_macro _USER_VARIABLES"].z_drop_speed * 60 %}

    {% set max_z = printer.toolhead.axis_maximum.z - printer.gcode_move.homing_origin.z |float %}
    {% set act_z = printer.toolhead.position.z|float %}

    {% set z_safe = act_z + Z_HOP %}
    {% if z_safe > max_z %}
        {% set z_safe = max_z %}
    {% endif %}

    {% if printer.toolhead.homed_axes != "xyz" %}
        {action_raise_error("Cannot park the toolhead because axis are not homed!")}
    {% endif %}
    
    SAVE_GCODE_STATE NAME=PARK

    {% if printer.extruder.can_extrude %}
        {% if params.E is defined %}
            {% set E = params.E|float|abs %}
            RESPOND MSG="Retraction overrided with parameter, Extruder retraction = {E}"

        {% else %}
            {% set E = 1.7 %}
            RESPOND MSG="Extruder retraction = {E}"

        {% endif %}

        {% if E is defined and E > 0 %}
            G92 E0
            G1 E-{E} F2100
        {% endif %}
    {% endif %}

    G90
    G1 Z{z_safe} F{Sz}
    G0 X{Px} Y{Py} F{St}
    
    RESTORE_GCODE_STATE NAME=PARK

# ═══════════════════════════════════════════════════════

[gcode_macro PARK_FRONT]
description: Park the toolhead on the front of the printer for maintenance
gcode:
    {% set St = printer["gcode_macro _USER_VARIABLES"].travel_speed * 60 %}
    {% set Sz = printer["gcode_macro _USER_VARIABLES"].z_drop_speed * 60 %}

    {% if printer.toolhead.homed_axes != "xyz" %}
        {action_raise_error("Cannot park the toolhead in maintenance position because axis are not homed!")}
    {% endif %}

    SAVE_GCODE_STATE NAME=PARK_FRONT

    G90      ; absolute positioning
    G0 Z{printer.toolhead.axis_maximum.z/3*2} F{Sz}
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+10} F{St}

    RESTORE_GCODE_STATE NAME=PARK_FRONT

# ═══════════════════════════════════════════════════════

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
description: Cancel the print, retract 10mm of filament and park
gcode:
    {% set light_intensity_end_print = printer["gcode_macro _USER_VARIABLES"].light_intensity_end_print %}
    {% set filter_time = printer["gcode_macro _USER_VARIABLES"].filter_time|default(600)|int %}
    {% set hotend_fan_tach_enabled = printer["gcode_macro _USER_VARIABLES"].hotend_fan_tach_enabled %}
    {% set filament_sensor_enabled = printer["gcode_macro _USER_VARIABLES"].filament_sensor_enabled %}
    {% set variable_filter_name = printer["gcode_macro _USER_VARIABLES"].variable_filter_name %}

    PARK

    {% if printer.extruder.can_extrude %}
        G92 E0
        G1 E-10 F2100
    {% endif %}

    TURN_OFF_HEATERS

    {% if hotend_fan_tach_enabled %}
        UPDATE_DELAYED_GCODE ID=_BACKGROUND_HOTEND_TACHO_CHECK DURATION=0
    {% endif %}

    M107
    M400
    CLEAR_PAUSE

    BED_MESH_CLEAR

    SDCARD_RESET_FILE

    {% if printer['fan_generic filter'].speed > 0 %}
        {% set FILTER_TIME = params.FILTER_TIME|default(filter_time)|int %}
        START_FILTER SPEED=1
        UPDATE_DELAYED_GCODE ID=_STOP_FILTER_DELAYED DURATION={FILTER_TIME}
    {% endif %}

    LIGHT_ON S={light_intensity_end_print}
    STATUS_LEDS COLOR="OFF"

    {% if filament_sensor_enabled %}
        SET_FILAMENT_SENSOR SENSOR="runout_sensor" ENABLE=1
    {% endif %}

    BASE_CANCEL_PRINT

# ═══════════════════════════════════════════════════════

[gcode_macro _OFF]
description: Turn off the printer
gcode:
    M84                                                             ; turn steppers off
    TURN_OFF_HEATERS                                                ; turn bed / hotend off
    M107                                                            ; turn print cooling fan off
    LIGHT_OFF                                                       ; turn off light
    STATUS_LEDS COLOR="SHUTDOWN"                                    ; turn off status LEDs

# ═══════════════════════════════════════════════════════

[gcode_macro SHUTDOWN]
description: Turn off the printer and shutdown the host
gcode:
    _OFF                                                            ; Shortcut to turn everything off (see above for this macro)
    {action_respond_info('action:poweroff')}                        ; OctoPrint compatible host shutdown
	{action_call_remote_method("shutdown_machine")}                 ; Moonraker compatible host shutdown

# ═══════════════════════════════════════════════════════

[gcode_macro _CG28]
description: Homing only if necessary
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        STATUS_LEDS COLOR="HOMING"
        G28
        STATUS_LEDS COLOR="READY"
    {% endif %}

# ═══════════════════════════════════════════════════════

[gcode_macro _LOW_TEMP_CHECK]
description: Check the nozzle is at temperature and heat it if needed
gcode: 
    {% set T = params.T|default(printer["gcode_macro _USER_VARIABLES"].print_default_extruder_temp)|float %}

    {% if printer.extruder.target != 0 %}
        {% if printer.extruder.temperature < printer.extruder.target %}
            M109 S{printer.extruder.target|float} 
        {% endif %}
    {% else %}
        {% if printer.extruder.target < T %}
            M109 S{T}
        {% endif %}
    {% endif %}

# ═══════════════════════════════════════════════════════

[delayed_gcode _BACKGROUND_HOTEND_TACHO_CHECK]
gcode:
    _HOTEND_FAN_CHECK
    UPDATE_DELAYED_GCODE ID=_BACKGROUND_HOTEND_TACHO_CHECK DURATION=3

# ═══════════════════════════════════════════════════════

[gcode_macro _HOTEND_FAN_CHECK]
description: Check the hotend fan tachometer to verify that it is running effectively
variable_he_stop_count: 0
gcode:
    {% set min_rpm = 1000|float %} # This is a relatively low value adapted to all fans to check that they are effectively running
    {% set max_consecutive_stops = 3 %}
    {% set rpm = printer['heater_fan hotend_fan'].rpm|float %}
    {% set he_target = printer[printer.toolhead.extruder].target|float %}
    {% set he_temp = printer[printer.toolhead.extruder].temperature|float %}
    {% set fan_on_temp = printer.configfile.settings['heater_fan hotend_fan'].heater_temp|float %}
    {% set he_stop_count = printer["gcode_macro _HOTEND_FAN_CHECK"].he_stop_count|int %}

    {% if (he_target >= fan_on_temp) and (rpm < min_rpm) and (he_temp >= fan_on_temp) %}
        SET_GCODE_VARIABLE MACRO=_HOTEND_FAN_CHECK VARIABLE=he_stop_count VALUE={he_stop_count + 1}
        RESPOND MSG="Hotend fan stoppage detected for {(he_stop_count+1)*3}sec (max {max_consecutive_stops*3}sec allowed)"
        M400
        {% if printer["gcode_macro _HOTEND_FAN_CHECK"].he_stop_count|int >= max_consecutive_stops-1 %}
            CANCEL_PRINT
            {action_raise_error("Hotend fan stoppage detected, print was canceled!")}
        {% endif %}
    {% else %}
        SET_GCODE_VARIABLE MACRO=_HOTEND_FAN_CHECK VARIABLE=he_stop_count VALUE=0
    {% endif %}

# ═══════════════════════════════════════════════════════

[gcode_macro _PART_FAN_CHECK]
description: Check the part fan tachometer to verify that it is running effectively
gcode:
    {% if printer.fan.rpm is not none %}
        {% if printer.fan.rpm > 1000 %} # This is a relatively low value adapted to all fans to check that they are effectively running
            {action_respond_info("Part fan OK!")}
        {% else %}
            M400
            CANCEL_PRINT
            {action_raise_error("Part cooling fan stoppage detected, print was canceled!")}
        {% endif %}
    {% endif %}

# ═══════════════════════════════════════════════════════

[gcode_macro PRIMELINE]
description: A purge macro that adapts to be near your actual printed objects
gcode:
    {% set adaptive_purge = printer["gcode_macro _USER_VARIABLES"].adaptive_purge %}
    {% set z_height = printer["gcode_macro _USER_VARIABLES"].z_height %}
    {% set tip_distance = printer["gcode_macro _USER_VARIABLES"].tip_distance %}
    {% set purge_amount = printer["gcode_macro _USER_VARIABLES"].purge_amount %}
    {% set flow_rate = printer["gcode_macro _USER_VARIABLES"].flow_rate %}
    {% set x_default = printer["gcode_macro _USER_VARIABLES"].x_default %}
    {% set y_default = printer["gcode_macro _USER_VARIABLES"].y_default %}
    {% set size = printer["gcode_macro _USER_VARIABLES"].size %}
    {% set distance_to_object_x = printer["gcode_macro _USER_VARIABLES"].distance_to_object_x %}
    {% set distance_to_object_y = printer["gcode_macro _USER_VARIABLES"].distance_to_object_y %}
    {% set adaptive_primeline = printer["gcode_macro _USER_VARIABLES"].adaptive_primeline %}

    {% if adaptive_purge == True %}
        {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
        {% set x_origin = (all_points | map(attribute=0) | min | default(x_default + distance_to_object_x + size)) - distance_to_object_x - size %}
        {% set y_origin = (all_points | map(attribute=1) | min | default(y_default + distance_to_object_y + size)) - distance_to_object_y - size %}
        {% set x_origin = ([x_origin, 0] | max) %}
        {% set y_origin = ([y_origin, 0] | max) %}
        
         {% if x_origin < x_default %}
            set x_origin = x_default | float
         {% endif %}
         
         {% if y_origin < y_default %}
            set y_origin = y_default | float
         {% endif %}

    {% else %}
        {% set x_origin = x_default | float %}
        {% set y_origin = y_default | float %}
    {% endif %}
    
  
    {% set purge_move_speed = 2.31 * size * flow_rate / (purge_amount * 2.405) %}
    {% set prepurge_speed = flow_rate / 2.405 %}
    {% set travel_speed = printer.toolhead.max_velocity %}
    { action_respond_info( "x: " + x_origin|string + " y: " + y_origin|string + " purge_move_speed: " + purge_move_speed|string + " prepurge_speed: " + prepurge_speed|string ) }

    G92 E0
    G0 F{travel_speed*5}                                                               # Set travel speed
    G90                                                                                 # Absolute positioning
    G0 X{x_origin} Y{y_origin+size/2}                                                   # Move to purge position
    G0 Z{z_height}                                                                      # Move to purge Z height
    M83                                                                                 # Relative extrusion mode
    G1 E{tip_distance} F{prepurge_speed*60}                                             # Move tip of filament to nozzle
    G1 X{x_origin+size*0.289} Y{y_origin+size} E{purge_amount/4} F{purge_move_speed*60} # Purge first line of logo
    G1 E-.5 F2100                                                                       # Retract
    G0 Z{z_height*2}                                                                    # Z hop
    G0 X{x_origin+size*0.789} Y{y_origin+size}                                          # Move to second purge line origin
    G0 Z{z_height}                                                                      # Move to purge Z height
    G1 E.5 F2100                                                                        # Recover
    G1 X{x_origin+size*0.211} Y{y_origin} E{purge_amount/2} F{purge_move_speed*60}      # Purge second line of logo
    G1 E-.5 F2100                                                                       # Retract
    G0 Z{z_height*2}                                                                    # Z hop
    G0 X{x_origin+size*0.711} Y{y_origin}                                               # Move to third purge line origin
    G0 Z{z_height}                                                                      # Move to purge Z height
    G1 E.5 F2100                                                                        # Recover
    G1 X{x_origin+size} Y{y_origin+size/2}  E{purge_amount/4} F{purge_move_speed*60}    # Purge third line of logo
    G1 E-.5 F2100                                                                       # Retract
    G92 E0                                                                              # Reset extruder distance
    M82                                                                                 # Absolute extrusion mode
    G0 Z{z_height*2}                                                                    # Z hop
    {% if printer["gcode_macro status_printing"] != null %}
        status_printing
    {% endif %}

# ═══════════════════════════════════════════════════════

[gcode_macro CLEAN_NOZZLE]
description: Wipe the nozzle on the brush
gcode:
    {% set brush_enabled = printer["gcode_macro _USER_VARIABLES"].brush_enabled %}
    {% set brush_clean_accel = printer["gcode_macro _USER_VARIABLES"].brush_clean_accel %}
    {% set brush_over_y_axis = printer["gcode_macro _USER_VARIABLES"].brush_over_y_axis %}
    {% set brush_offset = printer["gcode_macro _USER_VARIABLES"].brush_center_offset|default(0)|float %}
    {% set brush_size = printer["gcode_macro _USER_VARIABLES"].brush_width_x|default(40)|float %}
    {% set brushes = printer["gcode_macro _USER_VARIABLES"].brushes|default(6)|int %}

    {% if brush_enabled %}
        {% set St = printer["gcode_macro _USER_VARIABLES"].travel_speed * 60 %}
        {% set Sz = printer["gcode_macro _USER_VARIABLES"].z_drop_speed * 60 %}
        {% set Sc = printer["gcode_macro _USER_VARIABLES"].brush_clean_speed * 60 %}

        {% set Bx, By, Bz = printer["gcode_macro _USER_VARIABLES"].brush_xyz|map('float') %}
        {% set Bx = Bx + brush_offset %}

        STATUS_LEDS COLOR="CLEANING"

        # Set the cleaning acceleration prior to any movement
        {% set saved_accel = printer.toolhead.max_accel %}
        SET_VELOCITY_LIMIT ACCEL={brush_clean_accel}

        # Move to purge zone (left side)
        RESPOND MSG="Moving to purge zone"
        G90
        _CONDITIONAL_MOVE_TO_PURGE_BUCKET Z_DROP=1

        RESPOND MSG="Moving to center of the brush"
        G1 X{Bx} Y{By} F{St}
        G1 Z{Bz} F{St}

        RESPOND MSG="Wiping"
        G91
        {% if brush_over_y_axis %}
            {% for wipe in range(brushes) %}
                G1 Y-5 F{Sc}
                G1 Y+5 F{Sc}
            {% endfor %}
        {% endif %}

        RESPOND MSG="Moving to the right side of the brush"
        {% if brush_offset < 0 %} # brush center biased towards 0
            G1 X+{ brush_size/2 } F{Sc}
        {% else %}                # brush center biased towards x_max
            G1 X+{ (brush_size/2) - brush_offset} F{Sc}
        {% endif %}

        RESPOND MSG="Wiping"
        {% for wipe in range(brushes) %}
            G1 X-{ (brush_size) - brush_offset } F{Sc}
            G1 X+{ (brush_size) - brush_offset } F{Sc}
        {% endfor %}
        
        G1 Z10
        G90

        # Reset acceleration values to what it was before
        SET_VELOCITY_LIMIT ACCEL={saved_accel}
    {% endif %}

    STATUS_LEDS COLOR="READY"

# ═══════════════════════════════════════════════════════

[gcode_macro PURGE]
description: Purge a specific amount of filament ontop of the purge bucket
gcode:
    {% set DISTANCE = params.DISTANCE|default(printer["gcode_macro _USER_VARIABLES"].purge_distance)|int %}
    {% set OOZE_TIME = params.OOZE_TIME|default(printer["gcode_macro _USER_VARIABLES"].purge_ooze_time)|int %}
    {% set TEMP = params.TEMP|default(printer["gcode_macro _USER_VARIABLES"].print_default_extruder_temp)|float %}
    {% set Z_DROP = params.Z_DROP|default(1)|int %}

    {% set purge_enabled = printer["gcode_macro _USER_VARIABLES"].purge_enabled %}
    {% set filament_sensor_enabled = printer["gcode_macro _USER_VARIABLES"].filament_sensor_enabled %}
    {% set re_enable_filament_sensor = 0 %}

    {% if purge_enabled %}
        {% set St = printer["gcode_macro _USER_VARIABLES"].travel_speed * 60 %}
        {% set Sz = printer["gcode_macro _USER_VARIABLES"].z_drop_speed * 60 %}
        
        STATUS_LEDS COLOR="CLEANING"
        
        RESPOND MSG="Purge filament..."

        {% if filament_sensor_enabled %}
            {% if (printer['filament_motion_sensor runout_sensor'] is defined and printer['filament_motion_sensor runout_sensor'].enabled) or (printer['filament_switch_sensor runout_sensor'] is defined and printer['filament_switch_sensor runout_sensor'].enabled) %}
                SET_FILAMENT_SENSOR SENSOR="runout_sensor" ENABLE=0
                {% set re_enable_filament_sensor = 1 %}
            {% endif %}
        {% endif %}

        G90

        _CONDITIONAL_MOVE_TO_PURGE_BUCKET Z_DROP={Z_DROP}

        # Heat if needed and purge
        _LOW_TEMP_CHECK T={TEMP}
        G92 E0
        G1 E{DISTANCE|float} F150

        # Retract
        G92 E0
        G1 E-1.7 F2100
        G1 E-18.3 F150
        G92 E0

        # Wait some time to let the nozzle ooze before cleaning
        # No M400 needed here since G4 is also flushing Klipper's buffer
        G4 P{OOZE_TIME * 1000}

        {% if filament_sensor_enabled and re_enable_filament_sensor %}
            SET_FILAMENT_SENSOR SENSOR="runout_sensor" ENABLE=1
        {% endif %}

    {% endif %}

    STATUS_LEDS COLOR="READY"

# ═══════════════════════════════════════════════════════

[gcode_macro _CONDITIONAL_MOVE_TO_PURGE_BUCKET]
description: Move over the purge bucket
gcode:
    {% set Z_DROP = params.Z_DROP|default(1)|int %}

    {% set St = printer["gcode_macro _USER_VARIABLES"].travel_speed * 60 %}
    {% set Sz = printer["gcode_macro _USER_VARIABLES"].z_drop_speed * 60 %}
    {% set purge_enabled = printer["gcode_macro _USER_VARIABLES"].purge_enabled %}
    {% set Px, Py, Pz = printer["gcode_macro _USER_VARIABLES"].purge_bucket_xyz|map('float') %}

    # Move to purge zone only if it's available, else just purge where the toolhead is
    {% if purge_enabled %}
        SAVE_GCODE_STATE NAME=CONDITIONAL_MOVE_TO_PURGE_BUCKET_STATE
        G90

        {% if Z_DROP == 1 %}
            G1 X{Px} Y{Py} F{St}
            G1 Z{Pz} F{St}
        {% else %}
            # If Z_DROP=0 there is probably some parts on the bed: we do not move the
            # Z axis and purge from an higher position.
            G1 X{Px} Y{Py} F{St}
        {% endif %}

        RESTORE_GCODE_STATE NAME=CONDITIONAL_MOVE_TO_PURGE_BUCKET_STATE
    {% endif %}

# ═══════════════════════════════════════════════════════

[gcode_macro CHANGE_FILAMENT]
description: Do a PAUSE, park the toolhead over the purge bucket and unload the filament
gcode:
    {% set TEMP = params.TEMP|default(printer["gcode_macro _USER_VARIABLES"].print_default_extruder_temp)|float %}
    {% set DISTANCE = params.DISTANCE|default(105)|float %}

    SAVE_GCODE_STATE NAME=CHANGE_FILAMENT_state
    PAUSE
    _CONDITIONAL_MOVE_TO_PURGE_BUCKET Z_DROP=0
    UNLOAD_FILAMENT TEMP={TEMP} DISTANCE={DISTANCE}
    RESTORE_GCODE_STATE NAME=CHANGE_FILAMENT_state

# ═══════════════════════════════════════════════════════

[gcode_macro UNLOAD_FILAMENT]
gcode:
    {% set TEMP = params.TEMP|default(printer["gcode_macro _USER_VARIABLES"].print_default_extruder_temp)|float %}
    {% set DISTANCE = params.DISTANCE|default(105)|float %}
    {% set filament_sensor_enabled = printer["gcode_macro _USER_VARIABLES"].filament_sensor_enabled %}
    {% set re_enable_filament_sensor = 0 %}

    {% if filament_sensor_enabled %}
        {% if (printer['filament_motion_sensor runout_sensor'] is defined and printer['filament_motion_sensor runout_sensor'].enabled) or (printer['filament_switch_sensor runout_sensor'] is defined and printer['filament_switch_sensor runout_sensor'].enabled) %}
            SET_FILAMENT_SENSOR SENSOR="runout_sensor" ENABLE=0
            {% set re_enable_filament_sensor = 1 %}
            RESPOND MSG="Runout sensor deactivated to unload filament"
        {% endif %}
    {% endif %}

    SAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state
    _LOW_TEMP_CHECK T={TEMP}

    _TIP_SHAPING
    M83
    G1 E-20 F3600
    G4 P3000
    G1 E{DISTANCE|float * -1} F3000

    # Flushing Klipper's buffer to ensure the unload is done before continuing
    M400

    RESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state

    {% if filament_sensor_enabled and re_enable_filament_sensor %}
        SET_FILAMENT_SENSOR SENSOR="runout_sensor" ENABLE=1
        RESPOND MSG="Filament unloaded, runout sensor reactivated"
    {% endif %}

# ═══════════════════════════════════════════════════════

[gcode_macro LOAD_FILAMENT]
gcode:
    {% set TEMP = params.TEMP|default(printer["gcode_macro _USER_VARIABLES"].print_default_extruder_temp)|float %}
    {% set DISTANCE = params.DISTANCE|default(105)|float %}
    {% set filament_sensor_enabled = printer["gcode_macro _USER_VARIABLES"].filament_sensor_enabled %}
    {% set re_enable_filament_sensor = 0 %}

    _CONDITIONAL_MOVE_TO_PURGE_BUCKET

    {% if filament_sensor_enabled %}
        {% if (printer['filament_motion_sensor runout_sensor'] is defined and printer['filament_motion_sensor runout_sensor'].enabled) or (printer['filament_switch_sensor runout_sensor'] is defined and printer['filament_switch_sensor runout_sensor'].enabled) %}
            SET_FILAMENT_SENSOR SENSOR="runout_sensor" ENABLE=0
            {% set re_enable_filament_sensor = 1 %}
            RESPOND MSG="Runout sensor deactivated to load filament"
        {% endif %}
    {% endif %}

    SAVE_GCODE_STATE NAME=LOAD_FILAMENT_state
    _LOW_TEMP_CHECK T={TEMP}
    M83
    G92 E0
    G1 E{DISTANCE|float} F200
    G1 E50 F150

    M400

    G92 E0
    RESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state

    {% if filament_sensor_enabled and re_enable_filament_sensor %}
        SET_FILAMENT_SENSOR SENSOR="runout_sensor" ENABLE=1
        RESPOND MSG="Filament loaded, runout sensor reactivated"
    {% endif %}

# ═══════════════════════════════════════════════════════

[gcode_macro _TIP_SHAPING]
description: Filament tip shaping sequence
gcode:
    {% set TEMP = params.TEMP|default(printer["gcode_macro _USER_VARIABLES"].print_default_extruder_temp)|float %}
    {% set filament_sensor_enabled = printer["gcode_macro _USER_VARIABLES"].filament_sensor_enabled %}
    {% set re_enable_filament_sensor = 0 %}

    {% if filament_sensor_enabled %}
        {% if (printer['filament_motion_sensor runout_sensor'] is defined and printer['filament_motion_sensor runout_sensor'].enabled) or (printer['filament_switch_sensor runout_sensor'] is defined and printer['filament_switch_sensor runout_sensor'].enabled) %}
            SET_FILAMENT_SENSOR SENSOR="runout_sensor" ENABLE=0
            {% set re_enable_filament_sensor = 1 %}
            RESPOND MSG="Runout sensor deactivated for filament tip shaping"
        {% endif %}
    {% endif %}

    SAVE_GCODE_STATE NAME=TIP_SHAPING_state
    _LOW_TEMP_CHECK T={TEMP}

    {% set old_pressure_advance = printer.extruder.pressure_advance|default(0) %} # old pressure advance
    # we suppress pressure advance
    SET_PRESSURE_ADVANCE ADVANCE=0

    M82
    G92 E0
    G1 E2 F3600
    G1 E0 F3600
    G1 E3 F3600
    G1 E0 F3600
    G1 E4 F3600
    G1 E0 F3600

    # set last pressure advance
    SET_PRESSURE_ADVANCE ADVANCE={old_pressure_advance}

    M400

    RESTORE_GCODE_STATE NAME=TIP_SHAPING_state

    {% if filament_sensor_enabled and re_enable_filament_sensor %}
        SET_FILAMENT_SENSOR SENSOR="runout_sensor" ENABLE=1
        RESPOND MSG="Filament tip shaping done, runout sensor reactivated"
    {% endif %}

# ═══════════════════════════════════════════════════════

[gcode_macro START_FILTER]
gcode:
    {% set SPEED = params.SPEED|default(1)|float %}
    {% set filter_name = printer["gcode_macro _USER_VARIABLES"].filter_name %}
    SET_FAN_SPEED FAN={filter_name} SPEED={SPEED}

# ═══════════════════════════════════════════════════════

[gcode_macro STOP_FILTER]
gcode:
    {% set filter_name = printer["gcode_macro _USER_VARIABLES"].filter_name %}
    SET_FAN_SPEED FAN={filter_name} SPEED=0

# ═══════════════════════════════════════════════════════

[delayed_gcode _STOP_FILTER_DELAYED]
gcode:
    STOP_FILTER

# ═══════════════════════════════════════════════════════

[gcode_macro LIGHT_OFF]
gcode:
    {% set light_pin_name = printer["gcode_macro _USER_VARIABLES"].light_pin_name %}
    set_pin pin={light_pin_name} value=0

# ═══════════════════════════════════════════════════════

[gcode_macro LIGHT_ON]
gcode:
    {% set S = params.S|default(100)|float %}
    {% set light_pin_name = printer["gcode_macro _USER_VARIABLES"].light_pin_name %}
    set_pin pin={light_pin_name} value={S}
